var _masterlock = false;
var _master = ""; // if set here will not accept ingame command for master
var trigger = "."; // trigger used for commands
var _locate = "NTRush/rushbots/";
var run = this;
var Rev = "ERusher v1.1";

Include("NTRush/funcs/Loader.ntl");

function Command() {
	var _busy = false,
		_set = false;
		_end = false;

	Config.Load();
	NTA_Initialize();
	IncludeFuncs();

	NTTMGR_TownManager();

	SetStatusText(Rev + "Awaiting master");

	RegisterEvent(EVENT_GAMEMSG,
		function (msg, type) {
			var _sender, _command,
				_split = msg.split(":");

			if (type === 0 && msg.indexOf(trigger) !== -1) {
				_sender = _split[0].substring(3, _split[0].length - 3);
				_command = msg.toLowerCase().split(trigger)[1];

				if (_sender === me.name) {
					return;
				}

				switch (_masterlock) {
				case false: // no master atm
					if (_command !== "master") {
						Say("Master has not been set yet");
					} else if (_command === "master") {
						_master = _sender;
						_masterlock = true;
						Say("Master is now set to " + _master);
					}
					break;
				case true:
					if (_busy) {
						return Say("Busy at the moment");
					}
					if (_sender !== _master) {
						return Say("You are not my master " + _sender);
					}
					if (checkCommand(_command)) {
						_busy = true;
						SetStatusText(Rev + " Running " + _command);
						NTTMGR_TownManager();
						switch (_command) {
						case "cain":
							Cain();
							break;
						case "andy":
							Andy();
							break;
						case "radament":
							Radament();
							break;
						case "cube":
							Cube();
							break;
						case "staff":
							Staff();
							break;
						case "ammy":
							Ammy();
							break;
						case "summoner":
							Summoner();
							break;
						case "duriel":
							Duriel();
							break;
						case "tome":
							Tome();
							break;
						case "travincal":
							Travincal();
							break;
						case "mephisto":
							Mephisto();
							break;
						case "izual":
							Izual();
							break;
						case "hephasto":
							Hephasto();
							break;
						case "diablo":
							Diablo();
							break;
						case "shenk":
							Shenk();
							break;
						case "anya":
							Anya();
							break;
						case "ancients":
							Ancients();
							break;
						case "baal":
							Baal();
							break;
						case "waypoints":
							Waypoints();
							break;
						case "end":
							_end = true;
							break;
						case "list":
							commandList();
							break;
						case "rushone":
							RushAct(1);
							break;
						case "rushtwo":
							RushAct(2);
							break;
						case "rushthree":
							RushAct(3);
							break;
						case "rushfour":
							RushAct(4);
							break;
						case "rushfive":
							RushAct(5);
							break;
						case "rushall":
							Loader.Run();
							break;
						}
						_busy = false;
						SetStatusText(Rev + "Awaiting command");
					}
					break;
				}
			} else if (type === 4 && _masterlock) {
				if (msg.indexOf(_master) !== -1 && (msg.indexOf("weaken") !== -1 || msg.indexOf("timeout") !== -1)) {
					_end = true;
				}
			}
		}
		);

	while (!_end) {
		if (_master !== "" && !_set) {
			_masterlock = true;
			_set = true;
			SetStatusText(Rev + "Awaiting command");
		}
		Delay(500);
	}
	ExitGame();
}

function checkCommand(comm) {
	var i,
		possibles = ["cain", "andy", "radament", "cube", "staff", "ammy", "summoner", "duriel", "tome", "travincal", "mephisto", "izual", "hephasto", "diablo", "shenk", "anya", "ancients", "baal", "waypoints", "end", "list", "rushone", "rushtwo", "rushthree", "rushfour", "rushfive", "rushall"];

	for (i = 0; i < possibles.length; i += 1) {
		if (possibles[i] === comm) {
			return true;
		}
	}
	return false;
}

function RushAct(act) {
	var i, n, towned,
		_act1 = ["Cain", "Andy"],
		_act2 = ["Radament", "Cube", "Ammy", "Staff", "Summoner", "Duriel"],
		_act3 = ["Tome", "Travincal", "Mephisto"],
		_act4 = ["Izual", "Hephasto", "Diablo"],
		_act5 = ["Shenk", "Anya", "Ancients", "Baal"],
		_actRuns = [];

	switch (act) {
		case 1:
			for (n = 0; n < _act1.length; n += 1) {
				_actRuns.push(_act1[n]);
			}
			break;
		case 2:
			for (n = 0; n < _act2.length; n += 1) {
				_actRuns.push(_act2[n]);
			}
			break;
		case 3:
			for (n = 0; n < _act3.length; n += 1) {
				_actRuns.push(_act3[n]);
			}
			break;
		case 4:
			for (n = 0; n < _act4length; n += 1) {
				_actRuns.push(_act4[n]);
			}
			break;
		case 5:
			for (n = 0; n < _act5.length; n += 1) {
				_actRuns.push(_act5[n]);
			}
			break;
	}

RunLoop:
	for (i = 0; i < _actRuns.length; i += 1) {
		if (Scripts.hasOwnProperty(i) && Scripts[i]) {
			if (typeof run[i] === "function") {
				try {
					towned = NTTM_CheckAct();
				} catch (e1) {
					Print(COLOR_8 + "Failed to go to town.");
				}
			}

			if (towned) {
				try {
					Config.Load();
					SetStatusText(Rev + " Running " + i);
					NTTMGR_TownManager();
					run[i]();
				} catch (e) {
					Print(COLOR_8 + "Failed to run script");
				}
			}
		}
	}
}

function IncludeFuncs() {
	Include(_locate + "Cain.ntj");
	Include(_locate + "Andy.ntj");
	Include(_locate + "Radament.ntj");
	Include(_locate + "Cube.ntj");
	Include(_locate + "Staff.ntj");
	Include(_locate + "Ammy.ntj");
	Include(_locate + "Summoner.ntj");
	Include(_locate + "Duriel.ntj");
	Include(_locate + "Tome.ntj");
	Include(_locate + "Travincal.ntj");
	Include(_locate + "Mephisto.ntj");
	Include(_locate + "Izual.ntj");
	Include(_locate + "Haphasto.ntj");
	Include(_locate + "Diablo.ntj");
	Include(_locate + "Shenk.ntj");
	Include(_locate + "Anya.ntj");
	Include(_locate + "Ancients.ntj");
	Include(_locate + "Baal.ntj");
	Include(_locate + "Waypoints.ntj");
}

function commandList() {
	var comms = ["cain, ", "andy, ", "radament, ", "cube, ", "staff, ", // said in first line
		"ammy, ", "summoner, ", "duriel, ", "tome, ", "travincal, ", // said in second line
		"mephisto, ", "izual, ", "hephasto, ", "diablo, ", "shenk, ", // said in third line
		"anya, ", "ancients, ", "baal, ", "waypoints, ", "end, ", "list, ", // said in forth line
		"rushone, ", "rushtwo, ", "rushthree, ", "rushfour, ", "rushfive, ", "rushall"]; // said in last line

	Say("Available commands for the master are the trigger and any of the following ");
	Delay(1000);
	Say(comms[0] + comms[1] + comms[2] + comms[3] + comms[4]);
	Delay(1000);
	Say(comms[5] + comms[6] + comms[7] + comms[8] + comms[9]);
	Delay(1000);
	Say(comms[10] + comms[11] + comms[12] + comms[13] + comms[14]);
	Delay(1000);
	Say(comms[15] + comms[16] + comms[17] + comms[18] + comms[19] + comms[20]);
	Delay(1000);
	Say(comms[21] + comms[22] + comms[23] + comms[24] + comms[25] + comms[26]);
}