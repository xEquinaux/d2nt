function Diablo()
{
	NTA_Initialize();
	
	NTConfig_DancingSorc = false;

	if (!NTTM_TownMove("waypoint")) {
		return false;
	}

	if (!NTM_TakeWaypoint(107)) {
		return false;
	}

	NTP_DoPrecast(true);

	if (!NTM_MoveTo(108, 7790, 5544)) {
		return false;
	}

	NTM_MoveTo(108, 7792, 5291);

	if (!NT_OpenSealsInt()) {
		return false;
	}

	NTM_MoveTo(108, 7760, 5267);
	NTM_MakeTP();
		
	Say(Messages.diabloup);

	while (!NTC_IsQuesterIn()) {
		Delay(500);
	}

	NTM_MoveTo(108, 7792, 5291);

	for (i = 0; i < 200; i += 1) {
		if (GetUnit(NTC_UNIT_MONSTER, 243)) {
			break;
		}
		NTC_Delay(500);
	}

	if (!NTA_KillMonster(243)) {
		return false;
	}

	NTSI_PickItems();
	
	Say(Messages.diablodown);
	
	NTM_UsePortal("BluePortal", 103, me.charname);
	
	if (!NTTM_TownMove("waypoint")) {
		return false;
	}

	while (!NTC_IsGroupInAct(5)) {
		Delay(500);
	}

	if (!NTM_TakeWaypoint(109)) {
		return false;
	}

	return true;
}

function NT_OpenSealsInt() {
	var _unit, _result;

	_unit = GetPresetUnits(108, NTC_UNIT_OBJECT, 396);

	if (!_unit) {
		return false;
	}
	if (_unit[0].roomy * 5 + _unit[0].y == 5275) {
		_result = NT_OpenVizierSealInt(1);
	} else {
		_result = NT_OpenVizierSealInt(2);
	}

	NTP_DoPrecast(true);
		
	_unit = GetPresetUnits(108, NTC_UNIT_OBJECT, 394);
	if (_unit[0].roomx * 5 + _unit[0].x == 7773) {
		_result = NT_OpenDeSeisSealInt(1);
	} else {
		_result = NT_OpenDeSeisSealInt(2);
	}
	if (!_result) {
		return false;
	}

	_unit = GetPresetUnits(108, NTC_UNIT_OBJECT, 392);
	if (!_unit) {
		return false;
	}
	if (_unit[0].roomx * 5 + _unit[0].x == 7893) {
		_result = NT_OpenVenomSealInt(1);
	} else {
		_result = NT_OpenVenomSealInt(2);
	}
	NTP_DoPrecast(true);
	return _result;
}

function NT_OpenVizierSealInt(type) {
	var i, vx, vy;

	if (NTConfig_ClearCS) {
		if (type === 1) {
			vx = [7767,7756,7744,7747,7750,7741,7729,7720,7720,7721,7719,7712,7700,7687,7676, 7666];//	|||  |||
			vy = [5292,5284,5275,5290,5303,5310,5314,5312,5301,5288,5273,5292,5294,5294,5292, 5307];//      |||
		} else {
			vx = [7768,7755,7741,7733,7723,7714,7707,7680,7666, 7655];//   |||||||||
			vy = [5289,5295,5282,5291,5300,5282,5315,5310,5311, 5282];//   |||
		}
		for (i = 0; i < vx.length; i += 1) {
			NTM_MoveTo(108, vx[i], vy[i]);
			NTCS_ClearPosition(30, SealSort);
		}
	}
	
	if (!NT_OpenSealInt(395) || !NT_OpenSealInt(396)) {
		return false;
	}
	NTCS_ClearPosition(40, DistanceSort);
	NTA_KillMonster(GetLocaleString(2851)); // Grand Vizier of Chaos
	NTCS_ClearPosition(40, DistanceSort);
	
	return true;
}

function NT_OpenDeSeisSealInt(type) {
	var i, n, sx, sy;

	if (NTConfig_ClearCS) {
		if (type === 1) {
			sx = [7791,7783,7800,7809,7785,7773,7773,7776,7794,7811,7817,7815,7798]; // Shape of "2"
			sy = [5265,5256,5247,5232,5230,5222,5212,5194,5194,5193,5177,5157,5155];
		} else {
			sx = [7786,7801,7786,7787,7810,7811,7810,7790,7774,7773,7794]; // shape of an "S" or "5"
			sy = [5263,5249,5245,5227,5233,5215,5198,5194,5181,5156,5154];
		}
		for (i = 0; i < sx.length; i += 1) {
			NTM_MoveTo(108, sx[i], sy[i]);
			NTCS_ClearPosition(30, type === 1 ? SealSort : SealSortB);
		}
	}

	if (!NT_OpenSealInt(394)) {
		return false;
	}
	if (type == 1) {
		NTM_MoveTo(108, 7792, 5207);
		for (i = 0; i < 3; i += 1) {
			NTM_TeleportTo(7794, 5237);
		}
	} else {
		NTM_MoveTo(108, 7798, 5186);
	}

	NTCS_Preattack(GetLocaleString(2852));
	NTCS_ClearPosition(40, DistanceSort);
	NTA_KillMonster(GetLocaleString(2852)); // Lord De Seis
	NTCS_ClearPosition(40, DistanceSort);

	return NTM_MoveTo(108, 7800, 5255);
}

function NT_OpenVenomSealInt(type) {
	var i, IX, IY;
	if (NTConfig_ClearCS) {
		if (type === 1) {
			IX = [7825,7827,7834,7845,7855,7852,7875,7896,7917]; // shape of a "t"
			IY = [5293,5276,5291,5315,5301,5278,5293,5295,5291];
		} else {
			IX = [7822,7826,7832,7850,7868,7877,7891,7907,7927,7932]; // looks like a hook
			IY = [5297,5278,5307,5278,5297,5276,5276,5276,5279,5298];
		}
		for (i = 0; i < IX.length; i += 1) {
			NTM_MoveTo(108, IX[i], IY[i]);
			NTCS_ClearPosition(30, type === 1 ? SealSort : SealSortB);
		}
	}

	if (!NT_OpenSealInt(393) || !NT_OpenSealInt(392)) {
		return false;
	}

	NTCS_Preattack(GetLocaleString(2853));
	NTCS_ClearPosition(40, DistanceSort);
	NTA_KillMonster(GetLocaleString(2853)); // Infector of Souls
	NTCS_ClearPosition(40, DistanceSort);
	
	if (NTC_PutSkill(124, NTC_HAND_RIGHT)) {
		NTC_PingDelay(1000);
	}
	return true;
}

function NT_OpenSealInt(classid) {
	var warn, i, seal;
	switch (classid) {
	case 396:
	case 394:
	case 392:
		warn = true;
		break;
	default:
		warn = false;
		break;
	}

	for (i = 0; i < 5; i += 1) {
		NTM_MoveToPresetUnit(108, 2, classid, classid === 394 ? 5 : 2, classid === 394 ? 5 : 0);

		seal = NTC_FindUnit(NTC_UNIT_OBJECT, classid);

		if (!seal) {
			return false;
		}

		if (seal.mode) { // for pubbies
			if (warn) {
				Say("Dont touch the fucking seals!");
			}
			return true;
		}

		warn = false;

		NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, seal);
		NTC_Delay(classid === 394 ? 1000 : 500);

		if (!seal.mode) {
			if (classid === 394 && CheckCollision(seal.x + 15, seal.y)) { // de seis optimization
				NTM_MoveTo(108, seal.x + 15, seal.y);
			} else {
				NTM_MoveTo(108, seal.x - 5, seal.y - 5);
			}
			NTC_Delay(500);
		} else {
			return true;
		}
	}
	return false;
}

function NTA_MonsterStats(unit) {
	this.name = unit.name;
	this.x = unit.x;
	this.y = unit.y;
	this.gid = unit.gid;
	this.classid = unit.classid;
	this.spectype = unit.spectype;
}

function DistanceSort(unitA, unitB) {
	if (GetDistance(me.x, me.y, unitA.x, unitA.y) < GetDistance(me.x, me.y, unitB.x, unitB.y)) {
		return -1;
	}
	return 1;
}

function EntranceSort(unitA, unitB) {
	if (GetDistance(unitA.x, unitA.y, 7790, 5544) < GetDistance(unitB.x, unitB.y, 7790, 5544)) {
		return -1;
	}
	return 1;
}

function SealSort(unitA, unitB) {
	if (GetDistance(unitA.x, unitA.y, 7784, 5310) < GetDistance(unitB.x, unitB.y, 7784, 5310)) {
		return -1;
	}
	return 1;
}

function SealSortB(unitA, unitB) {
	if (GetDistance(unitA.x, unitA.y, 7800, 5255) < GetDistance(unitB.x, unitB.y, 7800, 5255)) {
		return -1;
	}
	return 1;
}

function NTCS_Preattack(name) {
	var i, n, target, pos, positions;

	target = NTC_FindUnit(1, name, 10);

	switch (me.classid) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			if (!target) {
				return;
			}
			positions = [[6, 11], [0, 8], [8, -1], [-9, 2], [0, -11], [8, -8]];
			for (i = 0; i < positions.length; i += 1) {
				if (CheckCollision(me.areaid, target.x + positions[i][0], target.y + positions[i][1], 1)) { // check if we can move there
					Print("Preattack position: " + positions[i][0] + " " + positions[i][1]);
					NTM_MoveTo(108, target.x + positions[i][0], target.y + positions[i][1]);
					NTC_PutSkill(NTConfig_AttackSkill[2], NTC_HAND_RIGHT);
					for (n = 0; n < 8; n += 1) {
						NTC_CastSkill(NTConfig_AttackSkill[1], 2);
					}
					break;
				}
			}
			break;
		case 4:
			if (!target || NTConfig_AttackSkill[0] < 0) {
				return;
			}
			pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, 20, 4);
			if (pos) {
				NTM_MoveTo(108, pos[0], pos[1]);
			}
			for (i = 0; i < 2; i += 1) {
				NTC_CastSkill(130, NTC_HAND_RIGHT);
				NTC_Delay(150);
			}
			break;
		case 5:
			break;
		case 6:
			break;
	}
}

function NTT_CheckPotionSafe() {
	var i, items, hpCheck, mpCheck;

	items = me.GetItems();

	if (NTConfig_BeltColType.indexOf("hp") > -1) {
		for (i = 0; i < items.length; i += 1) {
			if (!hpCheck && items[i].mode === 2 && items[i].code.indexOf("hp") > -1) {
				hpCheck = true;
			}
		}
	} else {
		hpCheck = true;
	}
	if (NTConfig_BeltColType.indexOf("mp") > -1) {
		for (i = 0; i < items.length; i += 1) {
			if (!mpCheck && items[i].mode === 2 && items[i].code.indexOf("mp") > -1) {
				mpCheck = true;
			}
		}
	} else {
		mpCheck = true;
	}
	return !(hpCheck && mpCheck);
}

function NTA_Dodge(target, distance) {
	var i, j, coordx, coordy, monster, count,
		maxcount = 999,
		coords = [],
		goodCoords = [],
		monList = [],
		angles = [45, 90, 135, 180, 225, 270, 305, 360];
	for (i = 0; i < angles.length; i += 1) {
		coordx = Math.round((Math.cos(angles[i] * Math.PI / 180)) * distance + target.x);
		coordy = Math.round((Math.sin(angles[i] * Math.PI / 180)) * distance + target.y);
		if (CheckCollision(me.areaid, coordx, coordy, 1)) {
			coords.push([coordx, coordy]);
		}
	}
	if (coords.length === 0) { // no valid positions - don't move
		return true;
	}

	coords.sort(NTA_SortRooms);

	monster = GetUnit(1);

	if (monster) {
		do {
			if (monster.hp > 0) {
				monList.push(new NTA_MonsterStats(target));
			}
		} while (monster.GetNext());
	}
	for (i = 0; i < coords.length; i += 1) {
		count = 0;
		for (j = 0; j < monList.length; j += 1) {
			if (monList[j].hp > 0 && GetDistance(monList[j].x, monList[j].y, coords[i][0], coords[i][1]) < 10) {
				count += 1;
			}
		}
		if (count < maxcount) {
			goodCoords = [coords[i][0], coords[i][1]];
			maxcount = count;
			if (count === 0) {
				break;
			}
		}
	}
	if (goodCoords.length > 0) { // just in case goodCoords is empty (shouldn't happen)
		if (Math.abs(me.x - goodCoords[0]) < 3 && Math.abs(me.y - goodCoords[1]) < 3) { // close enough
			return true;
		}
		Say("!Dodge " + target.name);
		NTM_MoveTo(me.areaid, goodCoords[0], goodCoords[1]);
	}
	return true;
}

function NTCS_ClearPosition(range, sortFunc, spectype, classid) {
	var i, orgx, orgy, monList, ignoreList, target, result,
		gidAttack = [],
		dodgeIDs = [310, 362],
		attackcount = 0;
	if (NTConfig_AttackSkill[1] < 0 || NTConfig_AttackSkill[3] < 0) {
		return false;
	}
	switch (arguments.length) {
	case 0:
		range = 20;
		break;
	case 1:
		sortFunc = DistanceSort;
		break;
	case 2:
		spectype = false;
		break;
	case 3:
		classid = false;
		break;
	}

	orgx = me.x;
	orgy = me.y;
	ignoreList = [];

	MainLoop : while (attackcount < 300) {
		monList = [];
		target = NTC_FindUnit(NTC_UNIT_MONSTER);
		if (target) {
			do {
				if (target.IsAttackable()) {
					if ((me.classid === 1 || me.classid === 2 || me.classid === 6) && NTConfig_CSDodge && GetDistance(me, target) < 7 && dodgeIDs.indexOf(target.classid) > -1) {
						NTA_Dodge(target, 15);
						continue MainLoop;
					}
					if (ignoreList.indexOf(target.gid) < 0 && GetDistance(orgx, orgy, target.x, target.y) <= range) {
						if (NTA_IsValidMonster(target)) {
							monList.push(new NTA_MonsterStats(target));
						} else {
							ignoreList.push(target.gid);
						}
					}
				}
			} while (target.GetNext());
		}
		if (monList.length === 0) {
			break;
		}
		monList.sort(sortFunc);
		target = NTC_FindUnit(NTC_UNIT_MONSTER, monList[0].gid);
		if (target && target.IsAttackable()) {
			result = NTA_Attack(target, attackcount % 30 === 0);
			switch (result) {
			case 1:
				monList.shift();
				ignoreList.push(target.gid);
				break;
			case 2:
			case 3:
				if(!gidAttack[target.gid]) {
					gidAttack[target.gid] = 0;
				}
				gidAttack[target.gid] += 1;
				if (gidAttack[target.gid] > NTConfig_LowMaxAttacks) {
					Print(COLOR_1 + " Skipping " + target.name);
					monList.shift();
					ignoreList.push(target.gid);
				}
				attackcount += 1;
				if (target.mode === 0 || target.mode === 12) {
					NTSI_FastPick();
				}
				break;
			default:
				return false;
			}
		} else {
			monList.shift();
			ignoreList.push(target.gid);
		}
	}
	switch (me.classid) {
		case NTC_CHAR_CLASS_PALADIN:
			if (attackcount > 2 && (parseInt(me.hp * 100/ me.hpmax) < NTConfig_UseRedemptionHP || parseInt(me.mp * 100 / me.mpmax) < NTConfig_UseRedemptionMP)) {
				if (NTC_PutSkill(124, NTC_HAND_RIGHT)) {
					NTC_PingDelay(1000);
				}
			}
			break;
		case NTC_CHAR_CLASS_NECROMANCER:
			if (typeof(NTA_SkeletonArmy) === 'function') { // old summon code
				NTA_SkeletonArmy(NTConfig_SkeletonArmy);
				NTA_MageArmy(NTConfig_MageArmy);
				NTA_ReviveArmy(NTConfig_ReviveArmy);
			} else {
				NTA_RaiseArmy(); // new summon code
			}
			break;
		case NTC_CHAR_CLASS_SORCERESS:
			if (me.GetState(30) === 0) {
				NTC_CastSkill(58, NTC_HAND_RIGHT);
			}
			break;
		case NTC_CHAR_CLASS_BARBARIAN:
			if (attackcount > 0) {
				if (typeof(MWL_FindItem) === 'function') { // in case of using muddy's item find (like myself)
					MWL_FindItem(20);
				} else if (NTConfig_UseFindItem && !NTA_CheckForCloseMonsters(10)) {
					NTA_FindItem(NTConfig_FindItemRange);
				}
			}
			break;
	}
	if (attackcount > 0) {
		NTSI_PickItems();
	}
	
	if (NTT_CheckMerc()) {
		Print(COLOR_1 + " Merc died, going to town.");
		NTTMGR_VisitTown();
	}

	if (NTT_CheckPotionSafe()) {
		Print(COLOR_1 + " Out of potions, going to town.");
		NTTMGR_VisitTown();
	}
	if (NTConfig_IdInField) {
		if (!NTT_CheckSpace(NTConfig_FreeSpaceXY[0], NTConfig_FreeSpaceXY[1])) {
			NT_FieldID();
		}
	}
	return true;
}

function NTA_SortRooms(a, b) {
	if (GetDistance(me.x, me.y, a[0], a[1]) < GetDistance(me.x, me.y, b[0], b[1])) {
		return -1;
	}
	return 1;
}